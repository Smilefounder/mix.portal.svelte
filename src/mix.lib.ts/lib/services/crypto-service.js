import * as CryptoJS from 'crypto-js';
export class CryptoService {
    constructor() {
        this.size = 256;
    }
    encryptAES(message, iCompleteEncodedKey) {
        const aesKeys = new AESKey(iCompleteEncodedKey);
        const options = {
            iv: aesKeys.iv,
            keySize: this.size / 8,
            mode: CryptoJS.mode.CBC,
            padding: CryptoJS.pad.Pkcs7,
        };
        return CryptoJS.AES.encrypt(message, aesKeys.key, options).toString();
    }
    decryptAES(ciphertext, iCompleteEncodedKey) {
        const aesKeys = new AESKey(iCompleteEncodedKey);
        const options = {
            iv: aesKeys.iv,
            keySize: this.size / 8,
            mode: CryptoJS.mode.CBC,
            padding: CryptoJS.pad.Pkcs7,
        };
        const decrypted = CryptoJS.AES.decrypt(ciphertext, aesKeys.key, options);
        return decrypted.toString(CryptoJS.enc.Utf8);
    }
}
export class AESKey {
    /**
     *
     */
    constructor(encryptedKeys) {
        const keyStrings = CryptoJS.enc.Utf8.stringify(CryptoJS.enc.Base64.parse(encryptedKeys)).split(',');
        this.iv = CryptoJS.enc.Base64.parse(keyStrings[0]);
        this.key = CryptoJS.enc.Base64.parse(keyStrings[1]).toString();
    }
}
export const cryptoService = new CryptoService();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J5cHRvLXNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9taXgubGliLnRzL3NyYy9saWIvc2VydmljZXMvY3J5cHRvLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLFFBQVEsTUFBTSxXQUFXLENBQUM7QUFDdEMsTUFBTSxPQUFPLGFBQWE7SUFBMUI7UUFDUyxTQUFJLEdBQUcsR0FBRyxDQUFDO0lBc0JwQixDQUFDO0lBckJRLFVBQVUsQ0FBQyxPQUFlLEVBQUUsbUJBQTJCO1FBQzVELE1BQU0sT0FBTyxHQUFHLElBQUksTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDaEQsTUFBTSxPQUFPLEdBQUc7WUFDZCxFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUU7WUFDZCxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDO1lBQ3RCLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUc7WUFDdkIsT0FBTyxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSztTQUM1QixDQUFDO1FBQ0YsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN4RSxDQUFDO0lBQ00sVUFBVSxDQUFDLFVBQWtCLEVBQUUsbUJBQTJCO1FBQy9ELE1BQU0sT0FBTyxHQUFHLElBQUksTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDaEQsTUFBTSxPQUFPLEdBQUc7WUFDZCxFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUU7WUFDZCxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDO1lBQ3RCLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUc7WUFDdkIsT0FBTyxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSztTQUM1QixDQUFDO1FBQ0YsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDekUsT0FBTyxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0MsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLE1BQU07SUFJakI7O09BRUc7SUFDSCxZQUFZLGFBQXFCO1FBQy9CLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FDNUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUN6QyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pFLENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDIn0=